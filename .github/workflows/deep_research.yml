name: Deep Research

on:
  issue_comment:
    types: [created]
    if: github.event.comment.body == '/deep_research'
    types: [created]

jobs:
  deep_research:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract research topic
        if: contains(github.event.comment.body, '/deep_research')
        id: extract_topic
        run: |
            COMMENT="${{ github.event.comment.body }}"
          if [[ "$COMMENT" =~ ^/deep_research[[:space:]]+(.*)$ ]] &amp;&amp; [[ "$COMMENT" == *"/deep_research"* ]]; then
            TOPIC=$(echo "${BASH_REMATCH[1]}" | tr -d '\r')
            if [[ ${#TOPIC} -gt 200 ]]; then
              echo "::set-output name=valid_command::false"
              echo "Topic is too long. Please limit it to 200 characters."
              exit 1
            fi
            echo "RESEARCH_TOPIC=$TOPIC" >> $GITHUB_OUTPUT
            echo "::set-output name=valid_command::true"
          else
            echo "::set-output name=valid_command::false"
            echo "Invalid command. Please use /research_agent <topic>"
          fi

- name: Post "research agent is running" comment
        if: steps.extract_topic.outputs.valid_command == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Research agent is running...'
            })
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          pip install -r examples/open_deep_research/requirements.txt
          pip install -e ../../.[dev]

      - name: Run deep research agent
        if: steps.extract_topic.outputs.valid_command == 'true'
        env:
          SERPAPI_API_KEY: ${{ secrets.SERPAPI_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        uses: actions/github-script@v6\n        with:\n          script: |\n            const issueDescription = await github.rest.issues.get({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n            }).then(response => response.data.body);\n\n            const comments = await github.rest.issues.listComments({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n            }).then(response => response.data.map(comment => comment.body).join('\\n'));\n\n            const combinedInput = `Issue Description: ${issueDescription}\\n\\nComments: ${comments}`;\n\n            const fs = require('fs');\n            fs.writeFileSync('research_input.txt', combinedInput);\n\n            const { execSync } = require('child_process');\n            execSync(`python examples/open_deep_research/run.py --model-id "gpt-4o-mini" research_input.txt > research_output.txt`);
        continue-on-error: true
        id: run_research
- name: Post research output
        if: steps.extract_topic.outputs.valid_command == 'true' && steps.run_research.outcome == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let output = fs.readFileSync('research_output.txt', 'utf8');
            const MAX_OUTPUT_SIZE = 65535; // Maximum comment size in GitHub
            if (output.length > MAX_OUTPUT_SIZE) {
              output = output.substring(0, MAX_OUTPUT_SIZE) + '\n... (truncated, see full output in research_output.txt)';
            }
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            await new Promise(resolve => setTimeout(resolve, 1000)); # Delay to avoid rate limiting

      - name: Post error message
        if: steps.extract_topic.outputs.valid_command == 'true' && steps.run_research.outcome != 'success'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Research agent failed to run. Please check the logs for details.'
            })
